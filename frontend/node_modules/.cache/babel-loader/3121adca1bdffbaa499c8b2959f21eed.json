{"ast":null,"code":"var _jsxFileName = \"/home/fernando/engenharia-de-software-2020.2e/frontend/src/utils/ProtectedRouteAdmin.js\",\n    _s = $RefreshSig$();\n\nimport { Route, Redirect } from 'react-router-dom';\nimport UserContext from '../contexts/UserContext';\nimport { useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProtectedRouteAdmin = ({\n  component: Comp,\n  path,\n  ...rest\n}) => {\n  _s();\n\n  const {\n    isLoggedInType\n  } = useContext(UserContext);\n  return /*#__PURE__*/_jsxDEV(Route, {\n    path: path,\n    ...rest,\n    render: props => {\n      return isLoggedInType === 'secretaria' ? /*#__PURE__*/_jsxDEV(Comp, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: {\n          pathname: '/login',\n          state: {\n            prevLocation: path,\n            error: `${isLoggedInType} Erro de Autenticação de Usuário! (Secretário de Saúde)`\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProtectedRouteAdmin, \"r9OaqUi85AZEoi6luTly4B5Z72s=\");\n\n_c = ProtectedRouteAdmin;\nexport default ProtectedRouteAdmin;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRouteAdmin\");","map":{"version":3,"sources":["/home/fernando/engenharia-de-software-2020.2e/frontend/src/utils/ProtectedRouteAdmin.js"],"names":["Route","Redirect","UserContext","useContext","ProtectedRouteAdmin","component","Comp","path","rest","isLoggedInType","props","pathname","state","prevLocation","error"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,SAASC,UAAT,QAA2B,OAA3B;;;AACA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,IAAb;AAAmBC,EAAAA,IAAnB;AAAyB,KAAGC;AAA5B,CAAD,KAAwC;AAAA;;AAClE,QAAM;AAAEC,IAAAA;AAAF,MAAqBN,UAAU,CAACD,WAAD,CAArC;AACA,sBACE,QAAC,KAAD;AACE,IAAA,IAAI,EAAEK,IADR;AAAA,OAEMC,IAFN;AAGE,IAAA,MAAM,EAAGE,KAAD,IAAW;AACjB,aAAOD,cAAc,KAAK,YAAnB,gBACL,QAAC,IAAD,OAAUC;AAAV;AAAA;AAAA;AAAA;AAAA,cADK,gBAGL,QAAC,QAAD;AACE,QAAA,EAAE,EAAE;AACFC,UAAAA,QAAQ,EAAE,QADR;AAEFC,UAAAA,KAAK,EAAE;AACLC,YAAAA,YAAY,EAAEN,IADT;AAELO,YAAAA,KAAK,EAAG,GAAEL,cAAe;AAFpB;AAFL;AADN;AAAA;AAAA;AAAA;AAAA,cAHF;AAaD;AAjBH;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAvBD;;GAAML,mB;;KAAAA,mB;AAyBN,eAAeA,mBAAf","sourcesContent":["import { Route, Redirect } from 'react-router-dom';\nimport UserContext from '../contexts/UserContext';\nimport { useContext } from 'react';\nconst ProtectedRouteAdmin = ({ component: Comp, path, ...rest }) => {\n  const { isLoggedInType } = useContext(UserContext);\n  return (\n    <Route\n      path={path}\n      {...rest}\n      render={(props) => {\n        return isLoggedInType === 'secretaria' ? (\n          <Comp {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/login',\n              state: {\n                prevLocation: path,\n                error: `${isLoggedInType} Erro de Autenticação de Usuário! (Secretário de Saúde)`,\n              },\n            }}\n          />\n        );\n      }}\n    />\n  );\n};\n\nexport default ProtectedRouteAdmin;\n"]},"metadata":{},"sourceType":"module"}